{
    "Course Code": "9010724",
    "METU Credit (Theoretical-Laboratory hours/week)": "3(3-0)",
    "ECTS Credit": "8.0",
    "Language of Instruction": "English",
    "Level of Study": "Graduate",
    "Course Coordinator": "",
    "Offered Semester": "Fall or Spring Semesters.",
    "Course Objectives": "<meta http-equiv=\"refresh\" content=\"0; URL=noscript.html\">METU | Course SyllabusCourse ObjectivesAt the end of this course, the student will;know basic principles, theory and concepts of software testingapply whitebox and blackbox test design techniquesmeasure test adequacy using coverage metrics and mutation testingrecognize inheritance and polymorphism problems in an object oriented programapply concepts and use unit testing, mocking, integrations testing tools.",
    "Course Learning Outcomes": "<meta http-equiv=\"refresh\" content=\"0; URL=noscript.html\">METU | Course SyllabusCourse Learning OutcomesStudent, who passed the course satisfactorily will be able to:define basic principles and terminology of software testingdescribe characteristics of test techniques and test levelsdesign a test suite using source code by applying various whitebox techniquesdesign a test suite using requirements by applying various blackbox techniquesmeasure test adequacy using coverage metrics and mutation testingpoint out inheritance problems and associated test design problemsrecognize where polymorphism problems may occur and design testsuse unit testing, mocking, integrations testing tools.",
    "Course Content": "The relationship of software testing to quality is examined with an emphasis on testing techniques. Topics include test types and techniques, defining test plans according to standards, estimating, managing, and improving the test process though metrics."
}